AuthController.cs
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using SafeCity.Api.Entity;
using SafeCity.Api.Utils;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
namespace SafeCity.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly SignInManager<AppUser> _signInManager;
        private readonly UserManager<AppUser> _userManager;
        public AuthController(UserManager<AppUser> userManager, SignInManager<AppUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }
        [HttpPost]
        [Route("Login/CreateAccount")]
        public async Task<IActionResult> SendOtpOnPhone(CreateAccountRequest request)
        {
            var user = await _userManager.FindByNameAsync(request.UserName);
            if (user == null)
            {
                user = new AppUser { UserName = request.UserName, FullName = request.FullName };
                var createUserResult = await _userManager.CreateAsync(user, request.Password);
                if (!createUserResult.Succeeded)
                {
                    return StatusCode(StatusCodes.Status500InternalServerError, "Failed to create user");
                }
                await _userManager.AddToRoleAsync(user, UserRoles.Client);
            }
            return Ok();
        }
        [HttpPost]
        [Route("Login/Login")]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(TokenResponse))]
        public async Task<IActionResult> Login(LoginRequest request)
        {
            var user = await _userManager.FindByNameAsync(request.UserName);
            if (user == null)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "User not found");
            }
            bool isValidPassword = await _userManager.CheckPasswordAsync(user, request.Password);
            if (isValidPassword)
            {
                await _signInManager.SignInAsync(user, isPersistent: false);
                JwtSecurityToken token = await GetToken(user);
                return Ok(new TokenResponse
                {
                    Token = new JwtSecurityTokenHandler().WriteToken(token),
                    Expiration = token.ValidTo,
                });
            }
            else
            {
                return BadRequest("Invalid passsword");
            }
        }
        private async Task<JwtSecurityToken> GetToken(AppUser user)
        {
            var userRoles = await _userManager.GetRolesAsync(user);
            var authClaims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, user.UserName),
                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                };
            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }
            var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("SafeCityContextSafeCityContext"));
            var token = new JwtSecurityToken(
                issuer: "SafeCityContextSafeCityContext",
                audience: "SafeCityContextSafeCityContext",
                expires: DateTime.Now.AddHours(720),
                claims: authClaims,
                signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
                );
            return token;
        }
    }
    public class CreateAccountRequest: LoginRequest
    {
        public string FullName { get; set; }
    }
    public class LoginRequest 
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    public class TokenResponse
    {
        public string Token { get; set; }
        public DateTime Expiration { get; set; }
    }
}
MarkController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SafeCity.Api.Data;
using SafeCity.Api.Entity;
using SafeCity.Api.Enums;
using SafeCity.Api.Utils;
using Mapster;
using Microsoft.AspNetCore.Authorization;
using System.Data;
namespace SafeCity.Api.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class MarkController : ControllerBase
    {
        public readonly SafeCityContext _context;
        public MarkController(SafeCityContext context)
        {
            _context = context;
        }
        [HttpPost("GetMarks")]
        public async Task<ActionResult<IEnumerable<MarkEntity>>> GetMarks(GetMarksRequest request)
        {
            var currentTime = DateTime.UtcNow;
            return (await _context.Marks
                .Where(x => x.CreatedTime.AddHours(8) > currentTime
                        && x.Status == MarkStatus.Active)
                .ToListAsync()).Where(x => CalculateDistance(request.Latitude, request.Longitude, x.Latitude, x.Longitude) <= request.Radius).ToList();
        }
        [HttpPost("CreateMark")]
        public async Task<ActionResult> CreateMark(CreateMarkRequest request)
        {
            int userId = User.GetClUserId();
            MarkEntity markEntity = request.Adapt<MarkEntity>();
            markEntity.UserId = userId;
            markEntity.CreatedTime = DateTime.UtcNow;
            markEntity.Status = MarkStatus.Active;
            _context.Marks.Add(markEntity);
            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpDelete("Delete/{id}")]
        public async Task<IActionResult> DeleteMark(int id)
        {
            int userId = User.GetClUserId();
            var markEntity = await _context.Marks.FindAsync(id);
            if (markEntity == null)
            {
                return NotFound();
            }
            if (markEntity.UserId != userId)
            {
                return BadRequest("You dont have permissions!");
            }
            markEntity.Status = MarkStatus.Deleted;
            _context.Entry(markEntity).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return Ok();
        }
        private double CalculateDistance(double lat1, double lon1, double lat2, double lon2, char unit = 'K')
        {
            if ((lat1 == lat2) && (lon1 == lon2))
            {
                return 0;
            }
            else
            {
                double theta = lon1 - lon2;
                double dist = Math.Sin(deg2rad(lat1)) * Math.Sin(deg2rad(lat2)) + Math.Cos(deg2rad(lat1)) * Math.Cos(deg2rad(lat2)) * Math.Cos(deg2rad(theta));
                dist = Math.Acos(dist);
                dist = rad2deg(dist);
                dist = dist * 60 * 1.1515;
                if (unit == 'K')
                {
                    dist = dist * 1.609344;
                }
                else if (unit == 'N')
                {
                    dist = dist * 0.8684;
                }
                return (dist);
            }
        }
        private double deg2rad(double deg)
        {
            return (deg * Math.PI / 180.0);
        }
        private double rad2deg(double rad)
        {
            return (rad / Math.PI * 180.0);
        }
    }
    public class GetMarksRequest
    {
        public double Longitude { get; set; }
        public double Latitude { get; set; }
        public double Radius { get; set; }
        public MarkType Type { get; set; }
    }
    public class CreateMarkRequest
    {
        public double Longitude { get; set; }
        public double Latitude { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public List<string> Images { get; set; }
        public List<string> Videos { get; set; }
        public MarkType Type { get; set; }
    }
}
NewsController.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SafeCity.Api.Data;
using SafeCity.Api.Entity;
using SafeCity.Api.Utils;
namespace SafeCity.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class NewsController : ControllerBase
    {
        private readonly SafeCityContext _context;
        public NewsController(SafeCityContext context)
        {
            _context = context;
        }
        [Authorize(Roles = UserRoles.AdminClient)]
        [HttpGet]
        public async Task<ActionResult<IEnumerable<NewsEntity>>> GetNews()
        {
            return await _context.News.ToListAsync();
        }
        [Authorize(Roles = UserRoles.Admin)]
        [HttpPost]
        public async Task<ActionResult<NewsEntity>> PostNewsEntity(NewsEntity newsEntity)
        {
            _context.News.Add(newsEntity);
            await _context.SaveChangesAsync();
            return Ok();
        }
        [Authorize(Roles = UserRoles.Admin)]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteNewsEntity(int id)
        {
            var newsEntity = await _context.News.FindAsync(id);
            if (newsEntity == null)
            {
                return NotFound();
            }
            _context.News.Remove(newsEntity);
            await _context.SaveChangesAsync();
            return Ok();
        }
    }
}
OffenderController.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SafeCity.Api.Data;
using SafeCity.Api.Entity;
using SafeCity.Api.Utils;
using FaceRecognitionDotNet;
using System.Drawing;
using Newtonsoft.Json;
using System.Net;
namespace SafeCity.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OffenderController : ControllerBase
    {
        private readonly SafeCityContext _context;
        public OffenderController(SafeCityContext context)
        {
            _context = context;
        }
        [Authorize]
        [HttpGet("FindOffenders/{name}")]
        public async Task<ActionResult<List<OffenderEntity>>> FindOffenders(string name)
        {
            var offenders = await _context.Offenders.Where(x => x.Name.Contains(name)).ToListAsync();
            return Ok(offenders);
        }
        [Authorize]
        [HttpPost("FindOffenderByImage")]
        public async Task<ActionResult<List<OffenderEntity>>> FindOffenderByImage(IFormFile imageFile)
        {
            var faceRecognition = FaceRecognition.Create("NNModels");
            using var ms = new MemoryStream();
            await imageFile.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            using var imageStream = new MemoryStream(imageBytes);
            var bitmap = new Bitmap(imageStream);
            var image = FaceRecognition.LoadImage(bitmap);
            IEnumerable<FaceEncoding> faceEncodings = faceRecognition.FaceEncodings(image);
            List<OffenderEntity> result = new List<OffenderEntity>();
            if (faceEncodings.Any())
            {
                List<OffenderEntity> offenders = await _context.Offenders.ToListAsync();
                foreach (var offender in offenders)
                {
                    // Десериализация ImageEncoding из строки в FaceEncoding
                    var offenderFaceEncoding = JsonConvert.DeserializeObject<FaceEncoding>(offender.ImageEncoding);
                    var comparesResult = FaceRecognition.CompareFaces(new[] { faceEncodings.First() }, offenderFaceEncoding).ToList();
                    if (comparesResult[0])
                    {
                        result.Add(offender);
                    }
                }
            }
            return Ok(result);
        }
        [Authorize(Roles = UserRoles.Admin)]
        [HttpPost("CreateOffender")]
        public async Task<ActionResult<OffenderEntity>> CreateOffender(CreateOffenderRerquest rerquest)
        {
            var faceRecognition = FaceRecognition.Create("NNModels");
            var webClient = new WebClient();
            var imageBytes = await webClient.DownloadDataTaskAsync(rerquest.ImageUrl);
            using var imageStream = new MemoryStream(imageBytes);
            var bitmap = new Bitmap(imageStream);
            var image = FaceRecognition.LoadImage(bitmap);
            IEnumerable<FaceEncoding> faceEncodings = faceRecognition.FaceEncodings(image);
            _context.Offenders.Add(new OffenderEntity
            {
                Name = rerquest.Name,
                Description = rerquest.Description,
                Image = rerquest.ImageUrl,
                ImageEncoding = JsonConvert.SerializeObject(faceEncodings.First()),
            });
            await _context.SaveChangesAsync();
            return Ok();
        }
        [Authorize(Roles = UserRoles.Admin)]
        [HttpDelete("DeleteOffender/{id}")]
        public async Task<IActionResult> DeleteOffender(int id)
        {
            var offenderEntity = await _context.Offenders.FindAsync(id);
            if (offenderEntity == null)
            {
                return NotFound();
            }
            _context.Offenders.Remove(offenderEntity);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
    public class CreateOffenderRerquest
    {
        public string Name { get; set; } 
        public string Description { get; set; }
        public  string ImageUrl { get; set; }
    }
}
UserController.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SafeCity.Api.Data;
using SafeCity.Api.Entity;
using SafeCity.Api.Utils;
namespace SafeCity.Api.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly SafeCityContext _context;
        public UserController(SafeCityContext context)
        {
            _context = context;
        }
        // GET: api/AppUsers/5
        [HttpGet("GetUserInfo")]
        public async Task<ActionResult<AppUser>> GetUserInfo()
        {
            int userId = User.GetClUserId();
            var appUser = await _context.Users.FindAsync(userId);
            if (appUser == null)
            {
                return NotFound();
            }
            return Ok(appUser);
        }
    }
}
WarningController.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SafeCity.Api.Data;
using SafeCity.Api.Entity;
using SafeCity.Api.Utils;
namespace SafeCity.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class WarningController : ControllerBase
    {
        private readonly SafeCityContext _context;
        public WarningController(SafeCityContext context)
        {
            _context = context;
        }
        [Authorize(Roles = UserRoles.Admin)]
        [HttpGet("GetWarnings")]
        public async Task<ActionResult<IEnumerable<WarningEntity>>> GetWarnings()
        {
            return await _context.Warnings.ToListAsync();
        }
        [Authorize(Roles = UserRoles.Client)]
        [HttpPost("CreateWarning")]
        public async Task<ActionResult<WarningEntity>> CreateWarning(WarningEntity warningEntity)
        {
            _context.Warnings.Add(warningEntity);
            await _context.SaveChangesAsync();
            return Ok();
        }
    }
}
SafeCityContext.cs
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newtonsoft.Json;
using SafeCity.Api.Entity;
namespace SafeCity.Api.Data
{
    public class SafeCityContext : IdentityDbContext<AppUser, IdentityRole<int>, int>
    {
        public SafeCityContext(DbContextOptions<SafeCityContext> options)
            : base(options)
        {
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<MarkEntity>()
                .Property(x => x.Images)
                .HasConversion(new ValueConverter<List<string>, string>(
                    v => JsonConvert.SerializeObject(v), // Convert to string for persistence
                    v => JsonConvert.DeserializeObject<List<string>>(v))); // Convert to List<String> for use
            modelBuilder.Entity<MarkEntity>()
                .Property(x => x.Videos)
                .HasConversion(new ValueConverter<List<string>, string>(
                    v => JsonConvert.SerializeObject(v), // Convert to string for persistence
                    v => JsonConvert.DeserializeObject<List<string>>(v))); // Convert to List<String> for use
        }
        public DbSet<MarkEntity> Marks { get; set; } = default!;
        public DbSet<WarningEntity> Warnings { get; set; } = default!;
        public DbSet<NewsEntity> News { get; set; } = default!;
        public DbSet<OffenderEntity> Offenders { get; set; } = default!;
        public DbSet<OffenderMarkEntity> FoundedOffenders { get; set; } = default!;
    }
}
AppUser.cs
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace SafeCity.Api.Entity
{
    public class AppUser : IdentityUser<int>
    {
        public string? FirstName { get; set; }
        public string? FullName { get; set; }
        public string? SecondName { get; set; }
    }
}
MarkEntity.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using SafeCity.Api.Enums;
namespace SafeCity.Api.Entity
{
    public class MarkEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public int UserId { get; set; }
        [ForeignKey(nameof(UserId))]
        public AppUser User { get; set; }
        public double Longitude { get; set; }
        public double Latitude { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public List<string> Images { get; set; }
        public List<string> Videos { get; set; }
        public MarkType Type { get; set; }
        public MarkStatus Status { get; set; }
        public DateTime CreatedTime { get; set; }
    }
}
NewsEntity.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using SafeCity.Api.Enums;
namespace SafeCity.Api.Entity
{
    public class NewsEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
    }
}
OffenderEntity.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using SafeCity.Api.Enums;
namespace SafeCity.Api.Entity
{
    public class OffenderEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
        public string ImageEncoding { get; set; }
    }
}
OffenderMarkEntity.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using SafeCity.Api.Enums;
namespace SafeCity.Api.Entity
{
    public class OffenderMarkEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public int OffenderId { get; set; }
        [ForeignKey(nameof(OffenderId))]
        public OffenderEntity Offender { get; set; }
        public int MarkId { get; set; }
        [ForeignKey(nameof(MarkId))]
        public MarkEntity Mark { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
        public FoundedOffenderStatus Status { get; set; }
    }
}
WarningEntity.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using SafeCity.Api.Enums;
namespace SafeCity.Api.Entity
{
    public class WarningEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public int UserId { get; set; }
        [ForeignKey(nameof(UserId))]
        public AppUser User { get; set; }
        public double Longitude { get; set; }
        public double Latitude { get; set; }
        public WarningStatus WarningStatus { get; set; }
    }
}
AuthHelper.cs
using System.Security.Claims;
namespace SafeCity.Api.Utils
{
    public static class AuthHelper
    {
        public static int GetClUserId(this ClaimsPrincipal principal)
        {
            string userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
            var userIdInt = Convert.ToInt32(userId);
            return userIdInt;
        }
    }
}
RoleInitializer.cs
using Microsoft.AspNetCore.Identity;
using SafeCity.Api.Entity;
namespace SafeCity.Api.Utils
{
    public class RoleInitializer
    {
        public static async Task InitializeAsync(UserManager<AppUser> userManager, RoleManager<IdentityRole<int>> roleManager)
        {
            if (await roleManager.FindByNameAsync(UserRoles.Client) == null)
            {
                await roleManager.CreateAsync(new IdentityRole<int>(UserRoles.Client));
            }
            if (await roleManager.FindByNameAsync(UserRoles.Admin) == null)
            {
                await roleManager.CreateAsync(new IdentityRole<int>(UserRoles.Admin));
            }
            string adminName = "Admin";
            string adminPassword = "Admin.01";
            if (await userManager.FindByNameAsync(adminName) == null)
            {
                AppUser admin = new AppUser { UserName = adminName };
                IdentityResult result = await userManager.CreateAsync(admin, adminPassword);
                if (result.Succeeded)
                {
                    await userManager.AddToRoleAsync(admin, UserRoles.Admin);
                }
            }
        }
    }
}
UserRoles.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace SafeCity.Api.Utils
{
    public static class UserRoles
    {
        public const string Client = "Client";
        public const string Admin = "Admin";
        public const string AdminClient = "Admin,Client";
    }
}
